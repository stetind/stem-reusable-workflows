name: ðŸ“– Generate Release

run-name: >-
  ${{
  format('ðŸ“– Generate Release using:  `{0}`',github.event.workflow_run.head_branch )
  }}


on:
  workflow_call:

jobs:
  drafting-a-new-release:
    runs-on: ubuntu-latest
    name: ðŸ“– Generate Release
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50


      - name: Check or create first tag #we need to initialize tags, in order to proceed to the next job
        run: |
          TAG="0.0.0"
          if [ $(git tag -l "${TAG}") ]; then
            gh release create 0.0.0
            echo "::notice::Creating ${TAG} tag"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Delete Old draft releases
        run : |
          gh release list --limit 10 |  while read -a line && [ ${line[1]} == Draft ] ; do
             echo "deleting ${line[0]}" ;
             gh release delete -y ${line[0]} ;
             echo "Deleting ${line[0]} release"
          done;
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Get Latest tag for branch
        id: find-tag
        run : |
          git fetch --force --tags -q
          LATEST=$(git describe --abbrev=0 --always --tags remotes/origin/${{ github.event.workflow_run.head_branch }})
          echo "::notice::Latest tag for "${{ github.event.workflow_run.head_branch }}" branch, is tag: ${LATEST}"
          echo "latest-tag=${LATEST}" >> "$GITHUB_OUTPUT"


      - name: Calculate Next Semver Version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          fromTag: ${{ steps.find-tag.outputs.latest-tag}}
          patchList: fix, bugfix, perf, ref, refactor, test, tests, chore, ci, docs, build
          noVersionBumpBehavior: current

      - name: Create Draft release
        run: |
          RESULT=$(gh release create ${{ steps.semver.outputs.nextStrict }}  --title ${{ steps.semver.outputs.nextStrict }} --draft --generate-notes)
          echo "::notice::A draft release ${{ steps.semver.outputs.nextStrict }} was created. You can check it out at ${RESULT}"
        env:
          GH_TOKEN: ${{ github.token }}


#      - name: Update CHANGELOG  # he needs tags to work
#        id: changelog
#        uses: requarks/changelog-action@v1
#        with:
#          token: ${{ github.token }}
#          tag: ${{ github.ref_name }}
#          writeToFile: false
#          includeInvalidCommits: true


#      - name: Get Commits Since
#        id: commits
#        uses: actions/github-script@v2
#        with:
#          github-token: ${{ github.token }}
#          script: |
#            const commits = await github.repos.listCommits({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              since: '${{ steps.semver.outputs.current }}'
#            })
#            // Strip out commit.verification property to make commit info shorter and avoid error: ##[error]Argument list too long
#            //core.setOutput("commits", JSON.stringify(commits.data.map(c => ({...c, commit: { ...c.commit, verification: null } }))))
#             core.setOutput("commits", commits.data)
#
#      - name: Update CHANGELOG
#        id: changelog
#        uses: mrchief/universal-changelog-action@v1.3.2
#        with:
#          previousReleaseTagNameOrSha: ${{ steps.semver.outputs.current }}
#          nextReleaseTagName: ${{ steps.semver.outputs.nextStrict }}
#          nextReleaseName: ${{ steps.semver.outputs.nextStrict }}
#          commits: ${{ steps.commits.outputs.commits }}
#
#
#      - name: Create Draft Release
#        uses: ncipollo/release-action@v1.12.0
#        with:
#          draft: true
#          commit: ${{ github.sha }}
#          tag: ${{ steps.semver.outputs.nextStrict }}
#          name: ${{ steps.semver.outputs.nextStrict }}
#          body: ${{ steps.changelog.outputs.changelog }}
#          token: ${{ github.token }}


#
#      - name: Create Release ${{ steps.semver.outputs.nextStrict }}
#        uses: ncipollo/release-action@v1.12.0
#        with:
#          allowUpdates: true
#          draft: true
#          prerelease: false
#          makeLatest: true
#          tag: ${{ steps.semver.outputs.nextStrict }}
#          name: ${{ steps.semver.outputs.nextStrict }}
#          body: ${{ steps.changelog.outputs.changes }}
#          token: ${{ github.token }}
