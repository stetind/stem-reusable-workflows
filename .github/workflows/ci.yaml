name: CI

on:
  workflow_call:
    secrets:
      COMPOSER_ACCESS_TOKEN:
        required: true

env:
  PHP_VERSION: 8.1

jobs:
  pint:
    name: Laravel Pint Linting
    runs-on: ubuntu-latest
    needs: [ "arch-test" ]
    steps:
      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: ðŸ”¨ Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: ðŸ§™ Configure Composer
        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3

      - name: ðŸ§™ Install Dependencies
        uses: ramsey/composer-install@v2

      - name: ðŸ”§  Run linter
        run: vendor/bin/pint -vv --config ruleset-pint.json --test

#  analyze:
#    name: PHPStan
#    runs-on: ubuntu-latest
#    needs: [ "arch-test" ]
#    steps:
#      - name: ðŸ›« Checkout
#        uses: actions/checkout@v3
#
#      - name: ðŸ”¨ Setup php
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: ${{ env.PHP_VERSION }}
#
#      - name: Cache the dependencies
#        uses: actions/cache@v3
#        id: cache-db
#        with:
#          path: vendor/
#          key: "caching"
#
#      - name: ðŸ”§ Run analyzer
#        run: vendor/bin/phpstan analyse --memory-limit=1G -c ruleset-phpstan.neon --error-format=github -vvv

  arch-test:
    name: Architecture Test
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ›« Checkout
        uses: actions/checkout@v3

      - name: ðŸ”¨ Setup php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: ðŸ§™ Configure Composer
        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"

      - name: ðŸ§™ Install Dependencies
        uses: ramsey/composer-install@v2

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-without-markdown
          path: vendor/

      - name: ðŸ§™ Configure Composer
        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"

      - name: ðŸš“ Run test
        run: vendor/bin/deptrac -v --report-uncovered --fail-on-uncovered

#  test:
#    name: PHPUnit
#    runs-on: ubuntu-latest
#    needs: [ "arch-test" ]
#    steps:
#      - name: ðŸ”¨ Setup php
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: ${{ env.PHP_VERSION }}
#          extensions: dom, curl, libxml, mbstring, zip, pdo, sqlite, pdo_sqlite
#          coverage: xdebug
#
#      - name: ðŸ›« Checkout
#        uses: actions/checkout@v3
#
#      - name: Cache the dependencies
#        uses: actions/cache@v3
#        id: cache-db
#        with:
#          path: vendor/
#          key: "${{ secrets.COMPOSER_ACCESS_TOKEN }}"
#
#      - name: ðŸ§™ Configure Composer
#        run: composer config --auth github-oauth.github.com "${{ secrets.COMPOSER_ACCESS_TOKEN }}"
#
#      - name: Update Dusk Chromedriver
#        run: vendor/bin/dusk-updater detect --auto-update
#
#      - name: ðŸ”§ Execute Unit Tests
#        run: vendor/bin/testbench package:test --parallel --coverage --min=90
#        env:
#          APP_URL: http://127.0.0.1:8001
#          DUSK_APP_HOST: 127.0.0.1
#          DUSK_DRIVER_URL: http://127.0.0.1:9515
#
#      - name: Upload Failed Screenshots
#        uses: actions/upload-artifact@v3.1.2
#        if: failure()
#        with:
#          name: screenshots
#          path: tests/Browser/screenshots/*
#
#      - name: Upload Failed Console Logs
#        if: failure()
#        uses: actions/upload-artifact@v3.1.2
#        with:
#          name: console
#          path: tests/Browser/console

#  security-check:
#    name: Vulnerability Check
#    runs-on: ubuntu-latest # be careful, we are using google-chrome, that pre-exists on ubuntu:20. Ubuntu 22 doesn't have it as default
#    steps:
#      - name: ðŸ›« Checkout
#        uses: actions/checkout@v3
#
#      - name: Cache the vulnerability database
#        uses: actions/cache@v3
#        id: cache-db
#        with:
#          path: ~/.symfony/cache
#          key: db
#
#      - name: ðŸ’© Run security check
#        uses: symfonycorp/security-checker-action@v5
#        with:
#          disable-exit-code: 1

#  document:
#    name: Update Documentation
#    runs-on: ubuntu-latest
#    steps:
#      - name: ðŸ“– Generate documentation
#        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} #I will only run on the main branch and not on pull request
#        uses: convictional/trigger-workflow-and-wait@v1.6.1
#        with:
#          owner: stetind
#          repo: stem-documentation
#          github_token: ${{ secrets.COMPOSER_ACCESS_TOKEN }}
#          workflow_file_name: docs.yaml
#          wait_workflow: false
